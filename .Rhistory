install.packages("DT")
library(keras)
keras::is_keras_available()
library(keras)
base_model <- application_densenet121(weights = 'imagenet', include_top = FALSE)
library(keras)
base_model <- application_densenet121(weights = 'imagenet', include_top = FALSE)
base_model <- application_resnet50(weights = 'imagenet', include_top = FALSE)
freeze_weights(base_model)
res50_model = keras_model_sequential() %>%
base_model %>%
layer_global_average_pooling_2d() %>%
layer_dense(units = 500, activation = "relu") %>%
layer_dense(units = 256, activation = "relu") %>%
layer_dense(units = 2, activation = "softmax")
res50_model.summary()
res50_model()
res50_model
res50_model = keras_model_sequential() %>%
base_model %>%
layer_global_average_pooling_2d() %>%
layer_dense(units = 1024, activation = "relu") %>%
layer_dense(units = 756, activation = "relu") %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dense(units = 2, activation = "softmax")
res50_model
res50_model.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=['accuracy'])
res50_model.compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=c('accuracy'))
res50_model$compile(loss='categorical_crossentropy', optimizer='rmsprop', metrics=c('accuracy'))
res50_model$compile(loss='categorical_crossentropy', optimizer= optimizer_rmsprop(), metrics=c('accuracy'))
res50_model$compile(loss='categorical_crossentropy', optimizer= optimizer_rmsprop(), metrics=c("accuracy"))
res50_model$compile(loss='categorical_crossentropy', optimizer= optimizer_rmsprop(), metrics=list("accuracy"))
res50_model$summary()
res50_model
res50_model$compile(loss='categorical_crossentropy',
optimizer= 'rsmprop', metrics=list("accuracy"))
res50_model$compile(loss='categorical_crossentropy',
optimizer= optimizer_rmsprop(), metrics=list("accuracy"))
system("python load_data.py")
library(tensorflow)
labels = readLines('model0/retrained_wheatleafnet_labels.txt')
f = tf$gfile$FastGFile('model0/retrained_wheatleafnet_graph.pb')
graph_def = tf$GraphDef()
graph_def$ParseFromString(f$read())
?export_savedmodel
gdef = tf$read_file('model0/retrained_wheatleafnet_graph.pb')
gdef
